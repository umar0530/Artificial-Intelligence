
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
import re
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow import keras
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

pd = pd.read_csv("dataset.txt")
pd.shape

# Visualization
pd['attack_category'].value_counts()
pd["attack_category"].value_counts().plot(kind="bar")
pd["protocol_type"].value_counts().plot(kind="bar")
pd.dtypes
pd.columns

# Data Preprocessing
df = pd.dropna('columns')# drop columns with NaN
df
# keep columns where there are more than 1 unique values
df = df[[col for col in df if df[col].nunique() > 1]]
df

# Correlation Analysis
corr = df.corr()

plt.figure(figsize=(15,12))

sns.heatmap(corr,cmap="Blues")

plt.show()

df['num_root'].corr(df['num_compromised'])
df['srv_serror_rate'].corr(df['serror_rate'])
df['srv_count'].corr(df['count'])
df['srv_rerror_rate'].corr(df['rerror_rate'])
df['dst_host_same_srv_rate'].corr(df['dst_host_srv_count'])
df['dst_host_srv_serror_rate'].corr(df['dst_host_serror_rate'])
df['dst_host_srv_rerror_rate'].corr(df['dst_host_rerror_rate'])
df['dst_host_same_srv_rate'].corr(df['same_srv_rate'])
df['dst_host_srv_count'].corr(df['same_srv_rate'])
df['dst_host_same_src_port_rate'].corr(df['srv_count'])
df['dst_host_serror_rate'].corr(df['serror_rate'])
df['dst_host_serror_rate'].corr(df['srv_serror_rate'])
df['dst_host_srv_serror_rate'].corr(df['serror_rate'])
df['dst_host_srv_serror_rate'].corr(df['srv_serror_rate'])
df['dst_host_rerror_rate'].corr(df['rerror_rate'])
df['dst_host_rerror_rate'].corr(df['srv_rerror_rate'])
df['dst_host_srv_rerror_rate'].corr(df['rerror_rate'])
df['dst_host_srv_rerror_rate'].corr(df['srv_rerror_rate'])

#These variables are highly correlated with each others and should be ignored for analysis.

df.drop('num_root',axis = 1,inplace = True)

df.drop('srv_serror_rate',axis = 1,inplace = True)

df.drop('srv_rerror_rate',axis = 1, inplace=True)

df.drop('dst_host_srv_serror_rate',axis = 1, inplace=True)

df.drop('dst_host_serror_rate',axis = 1, inplace=True)

df.drop('dst_host_rerror_rate',axis = 1, inplace=True)

df.drop('dst_host_srv_rerror_rate',axis = 1, inplace=True)

df.drop('dst_host_same_srv_rate',axis = 1, inplace=True)

# Standard Deviation
df_std = df.std()
df_std = df_std.sort_values(ascending = True)
df_std

text_file = open("Attack_types.txt")
file_content = text_file.read()
print(file_content)
text_file.close()
len(re.findall(r'\w+', file_content))
x = file_content.split()
x
type(x)
x.pop(0)
x.pop(0)
len(x)
for y in range(41):
    s=x.pop(0)
    print(s)
    h=x.pop(0)
    #print(h)
    df['attack_category'] = df['attack_category'].replace(s,h)
    #df2=df.replace(s,h)
    df["attack_category"].value_counts().plot(kind="bar")
    
    # Modeling
    from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import accuracy_score

# Target variable and train set
Y = df[['attack_category']]
X = df.drop(['attack_category',], axis=1)

sc = MinMaxScaler()
X = sc.fit_transform(X)

# Split test and train data 
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)
print(X_train.shape, X_test.shape)
print(Y_train.shape, Y_test.shape)

# Decision Tree
#Decision Tree 
from sklearn.tree import DecisionTreeClassifier
model2 = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
start_time = time.time()
model2.fit(X_train, Y_train.values.ravel())
end_time = time.time()
print("Training time: ",end_time-start_time)
start_time = time.time()
Y_test_pred2 = model2.predict(X_test)
end_time = time.time()
print("Testing time: ",end_time-start_time)
print("Train score is:", model2.score(X_train, Y_train))
print("Test score is:",model2.score(X_test,Y_test))

# KNN

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)
# Define KNN classifier with k=5
knn = KNeighborsClassifier(n_neighbors=5)
# Train the KNN classifier on the training data
knn.fit(X_train, Y_train)
# Make predictions on the testing data
Y_pred = knn.predict(X_test)
print("K-Nearest Neighbors Classifier Performance:")
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# ANN

#Artifical Neural Network
model = keras.Sequential([
    keras.layers.Dense(32, input_dim=X_train.shape[1], activation='relu'),
    keras.layers.Dense(16, activation='relu'),
    keras.layers.Dense(5, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model on the preprocessed dataset
history = model.fit(X_train, Y_train, epochs=100, batch_size=32, validation_split=0.2)

# Evaluate the performance of the trained model on the testing dataset
Y_pred = model.predict(X_test)
Y_pred = [np.argmax(y) for y in Y_pred]
accuracy = accuracy_score(Y_test, Y_pred)
precision = precision_score(Y_test, Y_pred, average='weighted')
recall = recall_score(Y_test, Y_pred, average='weighted')
f1 = f1_score(Y_test, Y_pred, average='weighted')
print("Accuracy: {:.2f}%".format(accuracy * 100))
print("Precision: {:.2f}%".format(precision * 100))
print("Recall: {:.2f}%".format(recall * 100))
print("F1-Score: {:.2f}%".format(f1 * 100))
print('Training time')
print((end_time-start_time))

#Training Accuracy
names = ['DT','KNN','ANN']
values = [87.951,99.7,99.914]
f = plt.figure(figsize=(15,3),num=3)
plt.subplot(131)
plt.ylim(80,102)
plt.bar(names,values)
f.savefig('training_accuracy_figure.png',bbox_inches='tight')

#Testing Accuracy
names = ['DT','KNN','ANN']
values = [87.951,99.7,99.914]
f = plt.figure(figsize=(15,3),num=3)
plt.subplot(131)
plt.ylim(80,102)
plt.bar(names,values)

#training time
names = ['DT','KNN','ANN']
values = [1.50483,550.3,1211.54094]
f = plt.figure(figsize=(15,3),num=10)
plt.subplot(131)
plt.bar(names,values)
f.savefig('train_time_figure.png',bbox_inches='tight')

#testing time
names = ['DT','KNN','ANN']
values = [0.10471,0.609,1.72521]
f = plt.figure(figsize=(15,3),num=10)
plt.subplot(131)
plt.bar(names,values)
f.savefig('test_time_figure.png',bbox_inches='tight')
